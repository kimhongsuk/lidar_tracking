#include "ros/ros.h"
#include <cstdio>
#include <iostream>
#include <time.h>

#include "coder_array.h"
#include "coder_bounded_array.h"
#include "correction.h"
#include "fusion_object.h"
#include "fusion_track_management.h"
#include "mpower.h"
#include "mtimes.h"
#include "MW_target_hardware_resources.h"
#include "prediction.h"
#include "rt_defines.h"
#include "rtGetInf.h"
#include "rtGetNaN.h"
#include "rt_nonfinite.h"
#include "rtwtypes.h"
#include "unit_conversion.h"
#include "unit_conversion_data.h"
#include "unit_conversion_initialize.h"
#include "unit_conversion_terminate.h"
#include "unit_conversion_types.h"

// Global Variables
double Lidar_Detection[256];
struct struct0_T *LIDAR_DETECTION;
struct struct3_T *UNIT_CONVERSION;
struct struct9_T *DEFINITION;
struct struct10_T *FUSION_TRACK;
struct struct17_T *TRACKING;
struct struct27_T *ASSOCIATION;


void msgCopy();

void paramInit();

void msgCallback() {
	const msg_tmp = msg;
	msgCopy(msg_tmp); // why indirect?

	
}

int main(int argc, char** argv) {
	ros::init(argc, argv, "");
	ros::NodeHandle nh;

	paramInit();

	File* input_file = fopen("/data/input.txt", "r");
}

// time stmap must be needed?
void msgCopy(const ) {
	lidar_detection_[0] = msg->measure.relative_position_x;
	lidar_detection_[1] = msg->measure.relative_position_y;
	lidar_detection_[2] = msg->measure.yaw;
	lidar_detection_[3] = msg->measure.length;
	lidar_detection_[4] = msg->measure.width;
	lidar_detection_[5] = msg->measure.height;
	lidar_detection_[6] = msg->measure.class;
	lidar_detection_[7] = msg->measure.score;
}

void paramInit() {
	LIDAR_DETECTION->MEASURE.REL_POS_X = 1;
	LIDAR_DETECTION->MEASURE.REL_POS_Y = 2;
	LIDAR_DETECTION->MEASURE.YAW = 3;
	LIDAR_DETECTION->MEASURE.LENGTH = 4;
	LIDAR_DETECTION->MEASURE.WIDTH = 5;
	LIDAR_DETECTION->MEASURE.HEIGHT = 6;
	LIDAR_DETECTION->MEASURE.CLASS = 7;
	LIDAR_DETECTION->MEASURE.SCORE = 8;
	LIDAR_DETECTION->MEASURE.STATE_NUMBER = 8;
	LIDAR_DETECTION->MEASURE.ID_EXIST = 0;
	LIDAR_DETECTION->TRACK_NUMBER = 32;
	LIDAR_DETECTION->STATE_NUMBER = 10;

	UNIT_CONVERSION->IN_VEHICLE_SENSOR.MEASURE.YAW = 1;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.MEASURE.LONG_VEL = 2;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.MEASURE.LAT_VEL = 3;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.MEASURE.YAW_RATE = 4;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.MEASURE.LONG_ACC = 5;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.MEASURE.LAT_ACC = 6;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.MEASURE.STEERING_ANGLE = 7;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.MEASURE.STATE_NUMBER = 7;

	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.YAW = 8;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.LONG_VEL = 9;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.LAT_VEL = 10;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.YAW_RATE = 11;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.LONG_ACC = 12;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.LAT_ACC = 13;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.STEERING_ANGLE = 14;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.VEHICLE_SPEED = 15;
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.PREPROCESSING.STATE_NUMBER = 8;
	
	UNIT_CONVERSION->IN_VEHICLE_SENSOR.STATE_NUMBER= 15;

	UNIT_CONVERSION->LIDAR.MEASURE.REL_POS_X = 1;
	UNIT_CONVERSION->LIDAR.MEASURE.REL_POS_Y = 2;
	UNIT_CONVERSION->LIDAR.MEASURE.HEADING_ANGLE = 3;
	UNIT_CONVERSION->LIDAR.MEASURE.LENGTH = 4;
	UNIT_CONVERSION->LIDAR.MEASURE.WIDTH = 5;
	UNIT_CONVERSION->LIDAR.MEASURE.HEIGHT = 6;
	UNIT_CONVERSION->LIDAR.MEASURE.ID = 7;
	UNIT_CONVERSION->LIDAR.MEASURE.LABEL = 8;
	UNIT_CONVERSION->LIDAR.MEASURE.BEHAVIOR_STATE = 9;
	UNIT_CONVERSION->LIDAR.MEASURE.REL_VEL_X = 10;
	UNIT_CONVERSION->LIDAR.MEASURE.REL_VEL_Y = 11;
	UNIT_CONVERSION->LIDAR.MEASURE.STATE_NUMBER = 11;
	UNIT_CONVERSION->LIDAR.MEASURE.TRACK_NUMBER = 32;
	UNIT_CONVERSION->LIDAR.MEASURE.ID_EXIST = 0;

	UNIT_CONVERSION->LIDAR.PREPROCESSING.REL_POS_X = 12;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.REL_POS_Y = 13;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.HEADING_ANGLE = 14;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.REL_VEL_X = 15;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.REL_VEL_Y = 16;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.REAR_REL_VEL_X = 17;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.REAR_REL_VEL_Y = 18;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.RANGE = 19;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.ANGLE = 20;
	UNIT_CONVERSION->LIDAR.PREPROCESSING.STATE_NUMBER = 9;
}
